(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



(* ::Input::Initialization:: *)
FunKit::allowinternetuse="You have forbidden Mathematica to access the internet. Either allow Mathematica to access the internet or download FunKit from github manually.";
If[Not["AllowInternetUse" /. SystemInformation["Network"]],
Message[FunKit::allowinternetuse];
Abort[];
];

(* just for backwards compatibility *)
If[ToString[Context[URLDownload]]=!="System`",
URLDownload=URLSave
];


(* ::Input::Initialization:: *)
FunKitRepositoryAddress="https://raw.githubusercontent.com/satfra/FunKit/main/";
FunKitZipLocation=FunKitRepositoryAddress<>"FunKit.zip";
FunKitInstallDir=FileNameJoin[{$UserBaseDirectory,"Applications"}];


(* ::Input::Initialization:: *)
FunKitInstaller::zipdownloadfailed="Download from "<>FunKitZipLocation<>" failed.";
FunKitInstaller::installationfailed="\nInstallation failed. Please read the error messages for more information!";

Print["Downloading FunKit ..."];
FunKitArchive=FileNameJoin[{$TemporaryDirectory,"FunKit.zip"}];
URLDownload[FunKitZipLocation,FunKitArchive]

tmpFunKitImport=Import[FunKitArchive];
If[tmpFunKitImport==="{\"error\":\"Not Found\"}"||tmpFunKitImport==="404: Not Found",
Message[FunKitInstaller::zipdownloadfailed];Abort[];
];

newVersionString=(List@@Import[FunKitArchive,FileNameJoin[{"FunKit","PacletInfo.m"}]])[[1]]["Version"];

FunKitFiles=FileNameJoin[{FunKitInstallDir,#}]&/@Import[FunKitArchive];
FunKitFilesExist=FileExistsQ/@FunKitFiles;
FunKitExistingInstallation=Or@@FunKitFilesExist;
FunKitExistingPacletInfo=FileNameJoin[{FunKitInstallDir,"FunKit","PacletInfo.m"}];
FunKitExistingVersionString=If[FileExistsQ[FunKitExistingPacletInfo],(List@@Import[FunKitArchive,FileNameJoin[{"FunKit","PacletInfo.m"}]])[[1]]["Version"],"unknown"];


(* ::Input::Initialization:: *)
deleteExisting=False;
deleteExisting=If[FunKitExistingInstallation,
ChoiceDialog["The installer has found an existing FunKit installation.
Do you want to overwrite the existing installation version "<>FunKitExistingVersionString<>" with version "<>newVersionString<>"?
Otherwise the installation will be aborted.",
WindowTitle->"FunKit Installation",WindowSize->{Medium,All}],False];

If[deleteExisting,DeleteFile[Pick[FunKitFiles,FunKitFilesExist]]];

If[FunKitExistingInstallation&&deleteExisting===False,
(*abort installation*)
Print["FunKit installation aborted."];,
(*install FunKit*)
installationSuccess=Check[
ExtractArchive[FunKitArchive,FunKitInstallDir];
Get["FunKit`"]
,$Failed];
If[installationSuccess===$Failed,
(*installation failed*)
Message[FunKitInstaller::installationfailed];,
(*installation successful*)
PacletDataRebuild[];
Print["Installation was successful."];
];
];

Quiet[DeleteFile[FunKitArchive]];
